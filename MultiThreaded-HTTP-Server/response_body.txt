
    //FOR DEBUGGING

    printf("Port Number: %d\n", ntohs(serv_addr.sin_port));
    char ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(serv_addr.sin_addr), ip, INET_ADDRSTRLEN);
    printf("Internet Address: %s\n//////////////////////////////////////\n", ip);
    printf("Name Of The Host: %s\n", server->h_name);
    printf("Alias List:\n");
    for (int i = 0; server->h_aliases[i] != NULL; i++) {
        printf("- %s\n", server->h_aliases[i]);
    }
    printf("Host Address Type: %d\n", server->h_addrtype);
    printf("Address Length: %d\n", server->h_length);
    printf("List of Addresses:\n");

    for (int i = 0; server->h_addr_list[i] != NULL; i++) {
        char *ip = inet_ntoa(*(struct in_addr *)server->h_addr_list[i]);
        printf("- %s\n", ip);
    }

    /////////////////////////////////////
    


    strcat(response, "\r\n");
                size_t size = strlen(response);
                size_t available = BUFFER_SIZE - size;
                char buffer[available];

                size_t bytesRead;
                printf("Before\n");
                if ((bytesRead = fread(buffer, 1, BUFFER_SIZE, file)) > 0) {
                    // send(clientSocket, buffer, bytesRead, 0);
                    // printf("Sent\n");
                    size_t response_length = strlen(response);
                    memcpy(response + response_length, buffer, bytesRead);
                    response_length += bytesRead;
                    send(clientSocket, buffer, response_length, 0);
                    printf("SENT\n");
                }
                printf("After\n");
